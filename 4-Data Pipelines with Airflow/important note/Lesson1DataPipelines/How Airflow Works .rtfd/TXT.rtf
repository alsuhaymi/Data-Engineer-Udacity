{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;\red62\green62\blue62;\red35\green46\blue57;\red255\green255\blue255;
\red21\green163\blue221;}
{\*\expandedcolortbl;;\cssrgb\c30980\c30980\c30980;\cssrgb\c18039\c23922\c28627;\cssrgb\c100000\c100000\c100000;
\cssrgb\c784\c70196\c89412;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl400\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Note: Ben refers to "Coco" in the video. He's referring to using an Airflow Workspace within the Udacity classroom.\
\pard\pardeftab720\sl480\qc\partightenfactor0

\f1\b\fs36 \cf3 \strokec3 Components of Airflow\
\pard\pardeftab720\sl400\qc\partightenfactor0

\f0\b0\fs30 \cf2 \cb4 \strokec2 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {{\NeXTGraphic airflow-diagram.png \width12285 \height4995 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\fs30 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls1\ilvl0
\f1\b\fs24 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Scheduler
\f0\b0 \'a0orchestrates the execution of jobs on a trigger or schedule. The Scheduler chooses how to prioritize the running and execution of tasks within the system. You can learn more about the Scheduler from the official\'a0{\field{\*\fldinst{HYPERLINK "https://airflow.apache.org/scheduler.html"}}{\fldrslt 
\f1\b \cf5 \strokec5 Apache Airflow documentation}}.\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Work Queue
\f0\b0 \'a0is used by the scheduler in most Airflow installations to deliver tasks that need to be run to the\'a0
\f1\b Workers
\f0\b0 .\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Worker
\f0\b0 \'a0processes execute the operations defined in each DAG. In most Airflow installations, workers pull from the\'a0
\f1\b work queue
\f0\b0 \'a0when it is ready to process a task. When the worker completes the execution of the task, it will attempt to process more work from the\'a0
\f1\b work queue
\f0\b0 \'a0until there is no further work remaining. When work in the queue arrives, the worker will begin to process it.\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Database
\f0\b0 \'a0saves credentials, connections, history, and configuration. The database, often referred to as the\'a0
\f2\i metadata database
\f0\i0 , also stores the state of all tasks in the system. Airflow components interact with the database with the Python ORM,\'a0{\field{\*\fldinst{HYPERLINK "https://www.sqlalchemy.org/"}}{\fldrslt 
\f1\b \cf5 \strokec5 SQLAlchemy}}.\
\ls1\ilvl0
\f1\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Web Interface
\f0\b0 \'a0provides a control dashboard for users and maintainers. Throughout this course you will see how the web interface allows users to perform tasks such as stopping and starting DAGs, retrying failed tasks, configuring credentials, The web interface is built using the\'a0{\field{\*\fldinst{HYPERLINK "http://flask.pocoo.org/"}}{\fldrslt 
\f1\b \cf5 \strokec5 Flask web-development microframework}}.\
\pard\pardeftab720\sl480\qc\partightenfactor0

\f1\b\fs36 \cf3 \strokec3 How Airflow Works\
\pard\pardeftab720\sl400\qc\partightenfactor0

\f0\b0\fs30 \cf2 \cb4 \strokec2 
\f1\b\fs24 \cf4 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {{\NeXTGraphic how-airflow-works.png \width20940 \height9735 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}
\f0\b0\fs30 \cf2 \cb4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\sl480\sa100\partightenfactor0

\f1\b\fs36 \cf3 \cb1 \strokec3 Order of Operations For an Airflow DAG\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls2\ilvl0
\f0\b0\fs24 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The Airflow Scheduler starts DAGs based on time or external triggers.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Once a DAG is started, the Scheduler looks at the steps within the DAG and determines which steps can run by looking at their dependencies.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The Scheduler places runnable steps in the queue.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Workers pick up those tasks and run them.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Once the worker has finished running the step, the final status of the task is recorded and additional tasks are placed by the scheduler until all tasks are complete.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Once all tasks have been completed, the DAG is complete.\
}