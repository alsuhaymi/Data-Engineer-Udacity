{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red35\green46\blue57;\red255\green255\blue255;\red62\green62\blue62;
\red14\green32\blue46;\red245\green245\blue246;\red14\green110\blue109;\red210\green0\blue53;\red21\green163\blue221;
}
{\*\expandedcolortbl;;\cssrgb\c18039\c23922\c28627;\cssrgb\c100000\c100000\c100000;\cssrgb\c30980\c30980\c30980;
\cssrgb\c5882\c16863\c23922;\cssrgb\c96863\c96863\c97255;\cssrgb\c0\c50196\c50196;\cssrgb\c86667\c6667\c26667;\cssrgb\c784\c70196\c89412;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs40 \cf2 \cb3 \expnd0\expndtw0\kerning0
Upsert\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf4 \cb3 In RDBMS language, the term 
\f2\i upsert
\f1\i0  refers to the idea of inserting a new row in an existing table, or updating the row if it already exists in the table. The action of updating or inserting has been described as "upsert".\cb1 \
\cb3 The way this is handled in PostgreSQL is by using the 
\f3\fs28\fsmilli14400 \cf5 \cb6 \uc0\u8237 INSERT
\f1\fs32 \cf4 \cb3 \uc0\u8236  statement in combination with the 
\f3\fs28\fsmilli14400 \cf5 \cb6 \uc0\u8237 ON CONFLICT
\f1\fs32 \cf4 \cb3 \uc0\u8236  clause.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs36 \cf2 \cb3 INSERT\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs32 \cf4 \cb3 The 
\f0\b INSERT
\f1\b0  statement adds in new rows within the table. The values associated with specific target columns can be added in any order.\cb1 \
\cb3 Let's look at a simple example. We will use a customer address table as an example, which is defined with the following 
\f0\b CREATE
\f1\b0  statement:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf5 \cb6 \uc0\u8237 CREATE TABLE IF NOT EXISTS customer_address (\uc0\u8236 \
    customer_id int PRIMARY KEY, \
    customer_street varchar NOT NULL,\
    customer_city text NOT NULL,\
    customer_state text NOT NULL\
);\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf4 \cb3 Let's try to insert data into it by adding a new row:\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf5 \cb6 \uc0\u8237 INSERT into customer_address (\uc0\u8236 \
VALUES\
    (\cf7 432\cf5 , \cf8 '758 Main Street'\cf5 , \cf8 'Chicago'\cf5 , \cf8 'IL'\cf5 \
);\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf4 \cb3 Now let's assume that the customer moved and we need to update the customer's address. However we do not want to add a new customer id. In other words, if there is any conflict on the 
\f3\fs28\fsmilli14400 \cf5 \cb6 \uc0\u8237 customer_id
\f1\fs32 \cf4 \cb3 \uc0\u8236 , we do not want that to change.\cb1 \
\cb3 This would be a good candidate for using the 
\f0\b ON CONFLICT DO NOTHING
\f1\b0  clause.\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf5 \cb6 \uc0\u8237 INSERT INTO customer_address (customer_id, customer_street, customer_city, customer_state)\uc0\u8236 \
VALUES\
 (\
 \cf7 432\cf5 , \cf8 '923 Knox Street'\cf5 , \cf8 'Albany'\cf5 , \cf8 'NY'\cf5 \
 ) \
ON CONFLICT (customer_id) \
DO NOTHING;\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf4 \cb3 Now, let's imagine we want to add more details in the existing address for an existing customer. This would be a good candidate for using the 
\f0\b ON CONFLICT DO UPDATE
\f1\b0  clause.\cb1 \
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf5 \cb6 \uc0\u8237 INSERT INTO customer_address (customer_id, customer_street)\uc0\u8236 \
VALUES\
    (\
    \cf7 432\cf5 , \cf8 '923 Knox Street, Suite 1'\cf5  \
) \
ON CONFLICT (customer_id) \
DO UPDATE\
    SET customer_street  = EXCLUDED.customer_street;\
\pard\pardeftab720\partightenfactor0

\f1\fs32 \cf4 \cb3 We recommend checking out these two links to learn other ways to insert data into the tables.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f0\b \cf9 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "http://www.postgresqltutorial.com/postgresql-upsert/"}}{\fldrslt \expnd0\expndtw0\kerning0
PostgreSQL tutorial}}
\f1\b0 \cf4 \cb1 \expnd0\expndtw0\kerning0
\
\ls1\ilvl0
\f0\b \cf9 \cb3 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://www.postgresql.org/docs/9.5/sql-insert.html"}}{\fldrslt \expnd0\expndtw0\kerning0
PostgreSQL documentation}}}